
242Resit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002548  08002548  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002548  08002548  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002548  08002548  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002548  08002548  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002548  08002548  00012548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000324  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000330  20000330  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a421  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001baa  00000000  00000000  0002a45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0002c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000740  00000000  00000000  0002c810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209be  00000000  00000000  0002cf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a3f2  00000000  00000000  0004d90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8772  00000000  00000000  00057d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00120472  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002018  00000000  00000000  001204c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002530 	.word	0x08002530

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002530 	.word	0x08002530

080001c8 <main>:

void SystemClock_Config(void);
void GPIO_Init(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_Init();
 80001ce:	f000 f905 	bl	80003dc <HAL_Init>
  SystemClock_Config();
 80001d2:	f000 f81d 	bl	8000210 <SystemClock_Config>
  GPIO_Init();
 80001d6:	f000 f823 	bl	8000220 <GPIO_Init>

  while (1)
  {
    // Set the outputPin high
    HAL_GPIO_WritePin(OUTPUT_PORT, OUTPUT_PIN, GPIO_PIN_SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	2140      	movs	r1, #64	; 0x40
 80001de:	480a      	ldr	r0, [pc, #40]	; (8000208 <main+0x40>)
 80001e0:	f000 fc2c 	bl	8000a3c <HAL_GPIO_WritePin>

    // Delay for 0.25 seconds
    HAL_Delay(250);
 80001e4:	20fa      	movs	r0, #250	; 0xfa
 80001e6:	f000 f96b 	bl	80004c0 <HAL_Delay>

    // Set the outputPin low
    HAL_GPIO_WritePin(OUTPUT_PORT, OUTPUT_PIN, GPIO_PIN_RESET);
 80001ea:	2200      	movs	r2, #0
 80001ec:	2140      	movs	r1, #64	; 0x40
 80001ee:	4806      	ldr	r0, [pc, #24]	; (8000208 <main+0x40>)
 80001f0:	f000 fc24 	bl	8000a3c <HAL_GPIO_WritePin>

    // Delay for another 0.25 seconds
    HAL_Delay(250);
 80001f4:	20fa      	movs	r0, #250	; 0xfa
 80001f6:	f000 f963 	bl	80004c0 <HAL_Delay>

    // Read the inputPin value
    GPIO_PinState inputPinState = HAL_GPIO_ReadPin(INPUT_PORT, INPUT_PIN);
 80001fa:	2180      	movs	r1, #128	; 0x80
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <main+0x44>)
 80001fe:	f000 fc05 	bl	8000a0c <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
  {
 8000206:	e7e8      	b.n	80001da <main+0x12>
 8000208:	40020000 	.word	0x40020000
 800020c:	40020400 	.word	0x40020400

08000210 <SystemClock_Config>:
    // Use the inputPinState as needed (e.g., perform actions based on its value)
  }
}

void SystemClock_Config(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  // Configure system clock as needed
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <GPIO_Init>:

void GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	2300      	movs	r3, #0
 8000228:	60bb      	str	r3, [r7, #8]
 800022a:	4b1d      	ldr	r3, [pc, #116]	; (80002a0 <GPIO_Init+0x80>)
 800022c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022e:	4a1c      	ldr	r2, [pc, #112]	; (80002a0 <GPIO_Init+0x80>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6313      	str	r3, [r2, #48]	; 0x30
 8000236:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <GPIO_Init+0x80>)
 8000238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	60bb      	str	r3, [r7, #8]
 8000240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <GPIO_Init+0x80>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <GPIO_Init+0x80>)
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	6313      	str	r3, [r2, #48]	; 0x30
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <GPIO_Init+0x80>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000256:	f003 0302 	and.w	r3, r3, #2
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;

  // Configure the outputPin as digital output
  GPIO_InitStruct.Pin = OUTPUT_PIN;
 800025e:	2340      	movs	r3, #64	; 0x40
 8000260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000262:	2301      	movs	r3, #1
 8000264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026a:	2300      	movs	r3, #0
 800026c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OUTPUT_PORT, &GPIO_InitStruct);
 800026e:	f107 030c 	add.w	r3, r7, #12
 8000272:	4619      	mov	r1, r3
 8000274:	480b      	ldr	r0, [pc, #44]	; (80002a4 <GPIO_Init+0x84>)
 8000276:	f000 fa2d 	bl	80006d4 <HAL_GPIO_Init>

  // Configure the inputPin as digital input
  GPIO_InitStruct.Pin = INPUT_PIN;
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000286:	2300      	movs	r3, #0
 8000288:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INPUT_PORT, &GPIO_InitStruct);
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	4619      	mov	r1, r3
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <GPIO_Init+0x88>)
 8000292:	f000 fa1f 	bl	80006d4 <HAL_GPIO_Init>
}
 8000296:	bf00      	nop
 8000298:	3720      	adds	r7, #32
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40020000 	.word	0x40020000
 80002a8:	40020400 	.word	0x40020400

080002ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <HAL_MspInit+0x4c>)
 80002b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ba:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <HAL_MspInit+0x4c>)
 80002bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002c0:	6453      	str	r3, [r2, #68]	; 0x44
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <HAL_MspInit+0x4c>)
 80002c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ce:	2300      	movs	r3, #0
 80002d0:	603b      	str	r3, [r7, #0]
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <HAL_MspInit+0x4c>)
 80002d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d6:	4a08      	ldr	r2, [pc, #32]	; (80002f8 <HAL_MspInit+0x4c>)
 80002d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002dc:	6413      	str	r3, [r2, #64]	; 0x40
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <HAL_MspInit+0x4c>)
 80002e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80002ea:	2007      	movs	r0, #7
 80002ec:	f000 f9be 	bl	800066c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40023800 	.word	0x40023800

080002fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000300:	e7fe      	b.n	8000300 <NMI_Handler+0x4>

08000302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000306:	e7fe      	b.n	8000306 <HardFault_Handler+0x4>

08000308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800030c:	e7fe      	b.n	800030c <MemManage_Handler+0x4>

0800030e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000312:	e7fe      	b.n	8000312 <BusFault_Handler+0x4>

08000314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <UsageFault_Handler+0x4>

0800031a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000348:	f000 f89a 	bl	8000480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}

08000350 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000354:	4802      	ldr	r0, [pc, #8]	; (8000360 <OTG_FS_IRQHandler+0x10>)
 8000356:	f000 fb8a 	bl	8000a6e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000002c 	.word	0x2000002c

08000364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <SystemInit+0x20>)
 800036a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800036e:	4a05      	ldr	r2, [pc, #20]	; (8000384 <SystemInit+0x20>)
 8000370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800038e:	490e      	ldr	r1, [pc, #56]	; (80003c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000390:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000394:	e002      	b.n	800039c <LoopCopyDataInit>

08000396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039a:	3304      	adds	r3, #4

0800039c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800039c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a0:	d3f9      	bcc.n	8000396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a2:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003a4:	4c0b      	ldr	r4, [pc, #44]	; (80003d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a8:	e001      	b.n	80003ae <LoopFillZerobss>

080003aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ac:	3204      	adds	r2, #4

080003ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b0:	d3fb      	bcc.n	80003aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003b2:	f7ff ffd7 	bl	8000364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003b6:	f002 f897 	bl	80024e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ba:	f7ff ff05 	bl	80001c8 <main>
  bx  lr    
 80003be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80003c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003cc:	08002550 	.word	0x08002550
  ldr r2, =_sbss
 80003d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003d4:	20000330 	.word	0x20000330

080003d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC_IRQHandler>
	...

080003dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <HAL_Init+0x40>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a0d      	ldr	r2, [pc, #52]	; (800041c <HAL_Init+0x40>)
 80003e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80003ec:	4b0b      	ldr	r3, [pc, #44]	; (800041c <HAL_Init+0x40>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a0a      	ldr	r2, [pc, #40]	; (800041c <HAL_Init+0x40>)
 80003f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <HAL_Init+0x40>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a07      	ldr	r2, [pc, #28]	; (800041c <HAL_Init+0x40>)
 80003fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000404:	2003      	movs	r0, #3
 8000406:	f000 f931 	bl	800066c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800040a:	2000      	movs	r0, #0
 800040c:	f000 f808 	bl	8000420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000410:	f7ff ff4c 	bl	80002ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40023c00 	.word	0x40023c00

08000420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <HAL_InitTick+0x54>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HAL_InitTick+0x58>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4619      	mov	r1, r3
 8000432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000436:	fbb3 f3f1 	udiv	r3, r3, r1
 800043a:	fbb2 f3f3 	udiv	r3, r2, r3
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f93b 	bl	80006ba <HAL_SYSTICK_Config>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800044a:	2301      	movs	r3, #1
 800044c:	e00e      	b.n	800046c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2b0f      	cmp	r3, #15
 8000452:	d80a      	bhi.n	800046a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000454:	2200      	movs	r2, #0
 8000456:	6879      	ldr	r1, [r7, #4]
 8000458:	f04f 30ff 	mov.w	r0, #4294967295
 800045c:	f000 f911 	bl	8000682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000460:	4a06      	ldr	r2, [pc, #24]	; (800047c <HAL_InitTick+0x5c>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000466:	2300      	movs	r3, #0
 8000468:	e000      	b.n	800046c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800046a:	2301      	movs	r3, #1
}
 800046c:	4618      	mov	r0, r3
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000000 	.word	0x20000000
 8000478:	20000008 	.word	0x20000008
 800047c:	20000004 	.word	0x20000004

08000480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_IncTick+0x20>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	461a      	mov	r2, r3
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_IncTick+0x24>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4413      	add	r3, r2
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <HAL_IncTick+0x24>)
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	20000008 	.word	0x20000008
 80004a4:	20000028 	.word	0x20000028

080004a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  return uwTick;
 80004ac:	4b03      	ldr	r3, [pc, #12]	; (80004bc <HAL_GetTick+0x14>)
 80004ae:	681b      	ldr	r3, [r3, #0]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	20000028 	.word	0x20000028

080004c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004c8:	f7ff ffee 	bl	80004a8 <HAL_GetTick>
 80004cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004d8:	d005      	beq.n	80004e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_Delay+0x44>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	461a      	mov	r2, r3
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4413      	add	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80004e6:	bf00      	nop
 80004e8:	f7ff ffde 	bl	80004a8 <HAL_GetTick>
 80004ec:	4602      	mov	r2, r0
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d8f7      	bhi.n	80004e8 <HAL_Delay+0x28>
  {
  }
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000008 	.word	0x20000008

08000508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <__NVIC_SetPriorityGrouping+0x44>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800051e:	68ba      	ldr	r2, [r7, #8]
 8000520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000524:	4013      	ands	r3, r2
 8000526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800053a:	4a04      	ldr	r2, [pc, #16]	; (800054c <__NVIC_SetPriorityGrouping+0x44>)
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	60d3      	str	r3, [r2, #12]
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <__NVIC_GetPriorityGrouping+0x18>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	f003 0307 	and.w	r3, r3, #7
}
 800055e:	4618      	mov	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	db0a      	blt.n	8000596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	b2da      	uxtb	r2, r3
 8000584:	490c      	ldr	r1, [pc, #48]	; (80005b8 <__NVIC_SetPriority+0x4c>)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	0112      	lsls	r2, r2, #4
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	440b      	add	r3, r1
 8000590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000594:	e00a      	b.n	80005ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4908      	ldr	r1, [pc, #32]	; (80005bc <__NVIC_SetPriority+0x50>)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f003 030f 	and.w	r3, r3, #15
 80005a2:	3b04      	subs	r3, #4
 80005a4:	0112      	lsls	r2, r2, #4
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	440b      	add	r3, r1
 80005aa:	761a      	strb	r2, [r3, #24]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	e000e100 	.word	0xe000e100
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b089      	sub	sp, #36	; 0x24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	f1c3 0307 	rsb	r3, r3, #7
 80005da:	2b04      	cmp	r3, #4
 80005dc:	bf28      	it	cs
 80005de:	2304      	movcs	r3, #4
 80005e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	3304      	adds	r3, #4
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	d902      	bls.n	80005f0 <NVIC_EncodePriority+0x30>
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	3b03      	subs	r3, #3
 80005ee:	e000      	b.n	80005f2 <NVIC_EncodePriority+0x32>
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	f04f 32ff 	mov.w	r2, #4294967295
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	43da      	mvns	r2, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	401a      	ands	r2, r3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000608:	f04f 31ff 	mov.w	r1, #4294967295
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	43d9      	mvns	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	4313      	orrs	r3, r2
         );
}
 800061a:	4618      	mov	r0, r3
 800061c:	3724      	adds	r7, #36	; 0x24
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3b01      	subs	r3, #1
 8000634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000638:	d301      	bcc.n	800063e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800063a:	2301      	movs	r3, #1
 800063c:	e00f      	b.n	800065e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <SysTick_Config+0x40>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3b01      	subs	r3, #1
 8000644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000646:	210f      	movs	r1, #15
 8000648:	f04f 30ff 	mov.w	r0, #4294967295
 800064c:	f7ff ff8e 	bl	800056c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <SysTick_Config+0x40>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <SysTick_Config+0x40>)
 8000658:	2207      	movs	r2, #7
 800065a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010

0800066c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ff47 	bl	8000508 <__NVIC_SetPriorityGrouping>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000682:	b580      	push	{r7, lr}
 8000684:	b086      	sub	sp, #24
 8000686:	af00      	add	r7, sp, #0
 8000688:	4603      	mov	r3, r0
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
 800068e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000694:	f7ff ff5c 	bl	8000550 <__NVIC_GetPriorityGrouping>
 8000698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	6978      	ldr	r0, [r7, #20]
 80006a0:	f7ff ff8e 	bl	80005c0 <NVIC_EncodePriority>
 80006a4:	4602      	mov	r2, r0
 80006a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff5d 	bl	800056c <__NVIC_SetPriority>
}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ffb0 	bl	8000628 <SysTick_Config>
 80006c8:	4603      	mov	r3, r0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
 80006ee:	e16b      	b.n	80009c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80006f0:	2201      	movs	r2, #1
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	4013      	ands	r3, r2
 8000702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000704:	693a      	ldr	r2, [r7, #16]
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	429a      	cmp	r2, r3
 800070a:	f040 815a 	bne.w	80009c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	f003 0303 	and.w	r3, r3, #3
 8000716:	2b01      	cmp	r3, #1
 8000718:	d005      	beq.n	8000726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000722:	2b02      	cmp	r3, #2
 8000724:	d130      	bne.n	8000788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	2203      	movs	r2, #3
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	43db      	mvns	r3, r3
 8000738:	69ba      	ldr	r2, [r7, #24]
 800073a:	4013      	ands	r3, r2
 800073c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	69ba      	ldr	r2, [r7, #24]
 800074c:	4313      	orrs	r3, r2
 800074e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	69ba      	ldr	r2, [r7, #24]
 8000754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800075c:	2201      	movs	r2, #1
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	43db      	mvns	r3, r3
 8000766:	69ba      	ldr	r2, [r7, #24]
 8000768:	4013      	ands	r3, r2
 800076a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	091b      	lsrs	r3, r3, #4
 8000772:	f003 0201 	and.w	r2, r3, #1
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	69ba      	ldr	r2, [r7, #24]
 800077e:	4313      	orrs	r3, r2
 8000780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	69ba      	ldr	r2, [r7, #24]
 8000786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f003 0303 	and.w	r3, r3, #3
 8000790:	2b03      	cmp	r3, #3
 8000792:	d017      	beq.n	80007c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	2203      	movs	r2, #3
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	43db      	mvns	r3, r3
 80007a6:	69ba      	ldr	r2, [r7, #24]
 80007a8:	4013      	ands	r3, r2
 80007aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	69ba      	ldr	r2, [r7, #24]
 80007c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f003 0303 	and.w	r3, r3, #3
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d123      	bne.n	8000818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	08da      	lsrs	r2, r3, #3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3208      	adds	r2, #8
 80007d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	f003 0307 	and.w	r3, r3, #7
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	220f      	movs	r2, #15
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	43db      	mvns	r3, r3
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	4013      	ands	r3, r2
 80007f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	691a      	ldr	r2, [r3, #16]
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	4313      	orrs	r3, r2
 8000808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	08da      	lsrs	r2, r3, #3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3208      	adds	r2, #8
 8000812:	69b9      	ldr	r1, [r7, #24]
 8000814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	2203      	movs	r2, #3
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4013      	ands	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f003 0203 	and.w	r2, r3, #3
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	4313      	orrs	r3, r2
 8000844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000854:	2b00      	cmp	r3, #0
 8000856:	f000 80b4 	beq.w	80009c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b60      	ldr	r3, [pc, #384]	; (80009e0 <HAL_GPIO_Init+0x30c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a5f      	ldr	r2, [pc, #380]	; (80009e0 <HAL_GPIO_Init+0x30c>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b5d      	ldr	r3, [pc, #372]	; (80009e0 <HAL_GPIO_Init+0x30c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000876:	4a5b      	ldr	r2, [pc, #364]	; (80009e4 <HAL_GPIO_Init+0x310>)
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	089b      	lsrs	r3, r3, #2
 800087c:	3302      	adds	r3, #2
 800087e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f003 0303 	and.w	r3, r3, #3
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	220f      	movs	r2, #15
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	4013      	ands	r3, r2
 8000898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a52      	ldr	r2, [pc, #328]	; (80009e8 <HAL_GPIO_Init+0x314>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d02b      	beq.n	80008fa <HAL_GPIO_Init+0x226>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a51      	ldr	r2, [pc, #324]	; (80009ec <HAL_GPIO_Init+0x318>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d025      	beq.n	80008f6 <HAL_GPIO_Init+0x222>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a50      	ldr	r2, [pc, #320]	; (80009f0 <HAL_GPIO_Init+0x31c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d01f      	beq.n	80008f2 <HAL_GPIO_Init+0x21e>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a4f      	ldr	r2, [pc, #316]	; (80009f4 <HAL_GPIO_Init+0x320>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d019      	beq.n	80008ee <HAL_GPIO_Init+0x21a>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a4e      	ldr	r2, [pc, #312]	; (80009f8 <HAL_GPIO_Init+0x324>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d013      	beq.n	80008ea <HAL_GPIO_Init+0x216>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a4d      	ldr	r2, [pc, #308]	; (80009fc <HAL_GPIO_Init+0x328>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d00d      	beq.n	80008e6 <HAL_GPIO_Init+0x212>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a4c      	ldr	r2, [pc, #304]	; (8000a00 <HAL_GPIO_Init+0x32c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d007      	beq.n	80008e2 <HAL_GPIO_Init+0x20e>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a4b      	ldr	r2, [pc, #300]	; (8000a04 <HAL_GPIO_Init+0x330>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d101      	bne.n	80008de <HAL_GPIO_Init+0x20a>
 80008da:	2307      	movs	r3, #7
 80008dc:	e00e      	b.n	80008fc <HAL_GPIO_Init+0x228>
 80008de:	2308      	movs	r3, #8
 80008e0:	e00c      	b.n	80008fc <HAL_GPIO_Init+0x228>
 80008e2:	2306      	movs	r3, #6
 80008e4:	e00a      	b.n	80008fc <HAL_GPIO_Init+0x228>
 80008e6:	2305      	movs	r3, #5
 80008e8:	e008      	b.n	80008fc <HAL_GPIO_Init+0x228>
 80008ea:	2304      	movs	r3, #4
 80008ec:	e006      	b.n	80008fc <HAL_GPIO_Init+0x228>
 80008ee:	2303      	movs	r3, #3
 80008f0:	e004      	b.n	80008fc <HAL_GPIO_Init+0x228>
 80008f2:	2302      	movs	r3, #2
 80008f4:	e002      	b.n	80008fc <HAL_GPIO_Init+0x228>
 80008f6:	2301      	movs	r3, #1
 80008f8:	e000      	b.n	80008fc <HAL_GPIO_Init+0x228>
 80008fa:	2300      	movs	r3, #0
 80008fc:	69fa      	ldr	r2, [r7, #28]
 80008fe:	f002 0203 	and.w	r2, r2, #3
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	4093      	lsls	r3, r2
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	4313      	orrs	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800090c:	4935      	ldr	r1, [pc, #212]	; (80009e4 <HAL_GPIO_Init+0x310>)
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	089b      	lsrs	r3, r3, #2
 8000912:	3302      	adds	r3, #2
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800091a:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <HAL_GPIO_Init+0x334>)
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	43db      	mvns	r3, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4013      	ands	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	4313      	orrs	r3, r2
 800093c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800093e:	4a32      	ldr	r2, [pc, #200]	; (8000a08 <HAL_GPIO_Init+0x334>)
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <HAL_GPIO_Init+0x334>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d003      	beq.n	8000968 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000968:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <HAL_GPIO_Init+0x334>)
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <HAL_GPIO_Init+0x334>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	43db      	mvns	r3, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4013      	ands	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d003      	beq.n	8000992 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	4313      	orrs	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000992:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <HAL_GPIO_Init+0x334>)
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_GPIO_Init+0x334>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	43db      	mvns	r3, r3
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4013      	ands	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d003      	beq.n	80009bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <HAL_GPIO_Init+0x334>)
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3301      	adds	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	2b0f      	cmp	r3, #15
 80009cc:	f67f ae90 	bls.w	80006f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40013800 	.word	0x40013800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40021400 	.word	0x40021400
 8000a00:	40021800 	.word	0x40021800
 8000a04:	40021c00 	.word	0x40021c00
 8000a08:	40013c00 	.word	0x40013c00

08000a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	691a      	ldr	r2, [r3, #16]
 8000a1c:	887b      	ldrh	r3, [r7, #2]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a24:	2301      	movs	r3, #1
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e001      	b.n	8000a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a4c:	787b      	ldrb	r3, [r7, #1]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a52:	887a      	ldrh	r2, [r7, #2]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a58:	e003      	b.n	8000a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a5a:	887b      	ldrh	r3, [r7, #2]
 8000a5c:	041a      	lsls	r2, r3, #16
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	619a      	str	r2, [r3, #24]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 fa0e 	bl	8001ea6 <USB_GetMode>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	f040 80f6 	bne.w	8000c7e <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f9f2 	bl	8001e80 <USB_ReadInterrupts>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f000 80ec 	beq.w	8000c7c <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 f9e9 	bl	8001e80 <USB_ReadInterrupts>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000ab8:	d104      	bne.n	8000ac4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ac2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 f9d9 	bl	8001e80 <USB_ReadInterrupts>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000ad8:	d104      	bne.n	8000ae4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ae2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 f9c9 	bl	8001e80 <USB_ReadInterrupts>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000af8:	d104      	bne.n	8000b04 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b02:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 f9b9 	bl	8001e80 <USB_ReadInterrupts>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d103      	bne.n	8000b20 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 f9ab 	bl	8001e80 <USB_ReadInterrupts>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b34:	d11c      	bne.n	8000b70 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b3e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10f      	bne.n	8000b70 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000b50:	2110      	movs	r1, #16
 8000b52:	6938      	ldr	r0, [r7, #16]
 8000b54:	f001 f8d8 	bl	8001d08 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000b58:	6938      	ldr	r0, [r7, #16]
 8000b5a:	f001 f909 	bl	8001d70 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2101      	movs	r1, #1
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 f9ac 	bl	8001ec2 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f001 fc3d 	bl	80023ea <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 f983 	bl	8001e80 <USB_ReadInterrupts>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b84:	d102      	bne.n	8000b8c <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f001 f829 	bl	8001bde <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 f975 	bl	8001e80 <USB_ReadInterrupts>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	d106      	bne.n	8000bae <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f001 fc06 	bl	80023b2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2208      	movs	r2, #8
 8000bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 f964 	bl	8001e80 <USB_ReadInterrupts>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	2b10      	cmp	r3, #16
 8000bc0:	d101      	bne.n	8000bc6 <HAL_HCD_IRQHandler+0x158>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e000      	b.n	8000bc8 <HAL_HCD_IRQHandler+0x15a>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d012      	beq.n	8000bf2 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	699a      	ldr	r2, [r3, #24]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 0210 	bic.w	r2, r2, #16
 8000bda:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 ff2c 	bl	8001a3a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	699a      	ldr	r2, [r3, #24]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f042 0210 	orr.w	r2, r2, #16
 8000bf0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 f942 	bl	8001e80 <USB_ReadInterrupts>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c06:	d13a      	bne.n	8000c7e <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 f992 	bl	8001f36 <USB_HC_ReadInterrupt>
 8000c12:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	e025      	b.n	8000c66 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	fa22 f303 	lsr.w	r3, r2, r3
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d018      	beq.n	8000c60 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	015a      	lsls	r2, r3, #5
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4413      	add	r3, r2
 8000c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c44:	d106      	bne.n	8000c54 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f836 	bl	8000cbe <HCD_HC_IN_IRQHandler>
 8000c52:	e005      	b.n	8000c60 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	4619      	mov	r1, r3
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 fb84 	bl	8001368 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d3d4      	bcc.n	8000c1a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c78:	615a      	str	r2, [r3, #20]
 8000c7a:	e000      	b.n	8000c7e <HAL_HCD_IRQHandler+0x210>
      return;
 8000c7c:	bf00      	nop
    }
  }
}
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d101      	bne.n	8000c9a <HAL_HCD_Stop+0x16>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e00d      	b.n	8000cb6 <HAL_HCD_Stop+0x32>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fa52 	bl	8002150 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	015a      	lsls	r2, r3, #5
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4413      	add	r3, r2
 8000ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d11a      	bne.n	8000d24 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	015a      	lsls	r2, r3, #5
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	212c      	movs	r1, #44	; 0x2c
 8000d06:	fb01 f303 	mul.w	r3, r1, r3
 8000d0a:	4413      	add	r3, r2
 8000d0c:	3361      	adds	r3, #97	; 0x61
 8000d0e:	2206      	movs	r2, #6
 8000d10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 f91b 	bl	8001f58 <USB_HC_Halt>
 8000d22:	e0af      	b.n	8000e84 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	015a      	lsls	r2, r3, #5
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d3a:	d11b      	bne.n	8000d74 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	015a      	lsls	r2, r3, #5
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4413      	add	r3, r2
 8000d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	212c      	movs	r1, #44	; 0x2c
 8000d56:	fb01 f303 	mul.w	r3, r1, r3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3361      	adds	r3, #97	; 0x61
 8000d5e:	2207      	movs	r2, #7
 8000d60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f8f3 	bl	8001f58 <USB_HC_Halt>
 8000d72:	e087      	b.n	8000e84 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	015a      	lsls	r2, r3, #5
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 0320 	and.w	r3, r3, #32
 8000d86:	2b20      	cmp	r3, #32
 8000d88:	d109      	bne.n	8000d9e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	015a      	lsls	r2, r3, #5
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4413      	add	r3, r2
 8000d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d96:	461a      	mov	r2, r3
 8000d98:	2320      	movs	r3, #32
 8000d9a:	6093      	str	r3, [r2, #8]
 8000d9c:	e072      	b.n	8000e84 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	015a      	lsls	r2, r3, #5
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4413      	add	r3, r2
 8000da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d11a      	bne.n	8000dea <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	015a      	lsls	r2, r3, #5
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4413      	add	r3, r2
 8000dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	212c      	movs	r1, #44	; 0x2c
 8000dcc:	fb01 f303 	mul.w	r3, r1, r3
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3361      	adds	r3, #97	; 0x61
 8000dd4:	2205      	movs	r2, #5
 8000dd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 f8b8 	bl	8001f58 <USB_HC_Halt>
 8000de8:	e04c      	b.n	8000e84 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	015a      	lsls	r2, r3, #5
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4413      	add	r3, r2
 8000df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e00:	d11b      	bne.n	8000e3a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	015a      	lsls	r2, r3, #5
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4413      	add	r3, r2
 8000e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e0e:	461a      	mov	r2, r3
 8000e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	212c      	movs	r1, #44	; 0x2c
 8000e1c:	fb01 f303 	mul.w	r3, r1, r3
 8000e20:	4413      	add	r3, r2
 8000e22:	3361      	adds	r3, #97	; 0x61
 8000e24:	2208      	movs	r2, #8
 8000e26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 f890 	bl	8001f58 <USB_HC_Halt>
 8000e38:	e024      	b.n	8000e84 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	015a      	lsls	r2, r3, #5
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4413      	add	r3, r2
 8000e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	d119      	bne.n	8000e84 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	015a      	lsls	r2, r3, #5
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4413      	add	r3, r2
 8000e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	212c      	movs	r1, #44	; 0x2c
 8000e68:	fb01 f303 	mul.w	r3, r1, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3361      	adds	r3, #97	; 0x61
 8000e70:	2206      	movs	r2, #6
 8000e72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 f86a 	bl	8001f58 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	015a      	lsls	r2, r3, #5
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e9a:	d112      	bne.n	8000ec2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 f856 	bl	8001f58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	015a      	lsls	r2, r3, #5
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ebe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000ec0:	e24e      	b.n	8001360 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	015a      	lsls	r2, r3, #5
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4413      	add	r3, r2
 8000eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	f040 80df 	bne.w	8001098 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d019      	beq.n	8000f16 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	212c      	movs	r1, #44	; 0x2c
 8000ee8:	fb01 f303 	mul.w	r3, r1, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	3348      	adds	r3, #72	; 0x48
 8000ef0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	0159      	lsls	r1, r3, #5
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	440b      	add	r3, r1
 8000efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000f04:	1ad2      	subs	r2, r2, r3
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	202c      	movs	r0, #44	; 0x2c
 8000f0c:	fb00 f303 	mul.w	r3, r0, r3
 8000f10:	440b      	add	r3, r1
 8000f12:	3350      	adds	r3, #80	; 0x50
 8000f14:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	212c      	movs	r1, #44	; 0x2c
 8000f1c:	fb01 f303 	mul.w	r3, r1, r3
 8000f20:	4413      	add	r3, r2
 8000f22:	3361      	adds	r3, #97	; 0x61
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	212c      	movs	r1, #44	; 0x2c
 8000f2e:	fb01 f303 	mul.w	r3, r1, r3
 8000f32:	4413      	add	r3, r2
 8000f34:	335c      	adds	r3, #92	; 0x5c
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	015a      	lsls	r2, r3, #5
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4413      	add	r3, r2
 8000f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f46:	461a      	mov	r2, r3
 8000f48:	2301      	movs	r3, #1
 8000f4a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	212c      	movs	r1, #44	; 0x2c
 8000f52:	fb01 f303 	mul.w	r3, r1, r3
 8000f56:	4413      	add	r3, r2
 8000f58:	333f      	adds	r3, #63	; 0x3f
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d009      	beq.n	8000f74 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	212c      	movs	r1, #44	; 0x2c
 8000f66:	fb01 f303 	mul.w	r3, r1, r3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	333f      	adds	r3, #63	; 0x3f
 8000f6e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d111      	bne.n	8000f98 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 ffea 	bl	8001f58 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	015a      	lsls	r2, r3, #5
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f90:	461a      	mov	r2, r3
 8000f92:	2310      	movs	r3, #16
 8000f94:	6093      	str	r3, [r2, #8]
 8000f96:	e03a      	b.n	800100e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	212c      	movs	r1, #44	; 0x2c
 8000f9e:	fb01 f303 	mul.w	r3, r1, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	333f      	adds	r3, #63	; 0x3f
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d009      	beq.n	8000fc0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	212c      	movs	r1, #44	; 0x2c
 8000fb2:	fb01 f303 	mul.w	r3, r1, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	333f      	adds	r3, #63	; 0x3f
 8000fba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d126      	bne.n	800100e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	015a      	lsls	r2, r3, #5
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	0151      	lsls	r1, r2, #5
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	440a      	add	r2, r1
 8000fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000fda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fde:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	212c      	movs	r1, #44	; 0x2c
 8000fe6:	fb01 f303 	mul.w	r3, r1, r3
 8000fea:	4413      	add	r3, r2
 8000fec:	3360      	adds	r3, #96	; 0x60
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	b2d9      	uxtb	r1, r3
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	202c      	movs	r0, #44	; 0x2c
 8000ffc:	fb00 f303 	mul.w	r3, r0, r3
 8001000:	4413      	add	r3, r2
 8001002:	3360      	adds	r3, #96	; 0x60
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f001 f9fc 	bl	8002406 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d12b      	bne.n	800106e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	212c      	movs	r1, #44	; 0x2c
 800101c:	fb01 f303 	mul.w	r3, r1, r3
 8001020:	4413      	add	r3, r2
 8001022:	3348      	adds	r3, #72	; 0x48
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	202c      	movs	r0, #44	; 0x2c
 800102c:	fb00 f202 	mul.w	r2, r0, r2
 8001030:	440a      	add	r2, r1
 8001032:	3240      	adds	r2, #64	; 0x40
 8001034:	8812      	ldrh	r2, [r2, #0]
 8001036:	fbb3 f3f2 	udiv	r3, r3, r2
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 818e 	beq.w	8001360 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	212c      	movs	r1, #44	; 0x2c
 800104a:	fb01 f303 	mul.w	r3, r1, r3
 800104e:	4413      	add	r3, r2
 8001050:	3354      	adds	r3, #84	; 0x54
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2d8      	uxtb	r0, r3
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	212c      	movs	r1, #44	; 0x2c
 8001060:	fb01 f303 	mul.w	r3, r1, r3
 8001064:	4413      	add	r3, r2
 8001066:	3354      	adds	r3, #84	; 0x54
 8001068:	4602      	mov	r2, r0
 800106a:	701a      	strb	r2, [r3, #0]
}
 800106c:	e178      	b.n	8001360 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	212c      	movs	r1, #44	; 0x2c
 8001074:	fb01 f303 	mul.w	r3, r1, r3
 8001078:	4413      	add	r3, r2
 800107a:	3354      	adds	r3, #84	; 0x54
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	f083 0301 	eor.w	r3, r3, #1
 8001082:	b2d8      	uxtb	r0, r3
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	212c      	movs	r1, #44	; 0x2c
 800108a:	fb01 f303 	mul.w	r3, r1, r3
 800108e:	4413      	add	r3, r2
 8001090:	3354      	adds	r3, #84	; 0x54
 8001092:	4602      	mov	r2, r0
 8001094:	701a      	strb	r2, [r3, #0]
}
 8001096:	e163      	b.n	8001360 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	015a      	lsls	r2, r3, #5
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4413      	add	r3, r2
 80010a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	f040 80f6 	bne.w	800129c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	212c      	movs	r1, #44	; 0x2c
 80010b6:	fb01 f303 	mul.w	r3, r1, r3
 80010ba:	4413      	add	r3, r2
 80010bc:	3361      	adds	r3, #97	; 0x61
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d109      	bne.n	80010d8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	212c      	movs	r1, #44	; 0x2c
 80010ca:	fb01 f303 	mul.w	r3, r1, r3
 80010ce:	4413      	add	r3, r2
 80010d0:	3360      	adds	r3, #96	; 0x60
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e0c9      	b.n	800126c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	212c      	movs	r1, #44	; 0x2c
 80010de:	fb01 f303 	mul.w	r3, r1, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	3361      	adds	r3, #97	; 0x61
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d109      	bne.n	8001100 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	212c      	movs	r1, #44	; 0x2c
 80010f2:	fb01 f303 	mul.w	r3, r1, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	3360      	adds	r3, #96	; 0x60
 80010fa:	2205      	movs	r2, #5
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	e0b5      	b.n	800126c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	212c      	movs	r1, #44	; 0x2c
 8001106:	fb01 f303 	mul.w	r3, r1, r3
 800110a:	4413      	add	r3, r2
 800110c:	3361      	adds	r3, #97	; 0x61
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b06      	cmp	r3, #6
 8001112:	d009      	beq.n	8001128 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	212c      	movs	r1, #44	; 0x2c
 800111a:	fb01 f303 	mul.w	r3, r1, r3
 800111e:	4413      	add	r3, r2
 8001120:	3361      	adds	r3, #97	; 0x61
 8001122:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001124:	2b08      	cmp	r3, #8
 8001126:	d150      	bne.n	80011ca <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	212c      	movs	r1, #44	; 0x2c
 800112e:	fb01 f303 	mul.w	r3, r1, r3
 8001132:	4413      	add	r3, r2
 8001134:	335c      	adds	r3, #92	; 0x5c
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	202c      	movs	r0, #44	; 0x2c
 8001140:	fb00 f303 	mul.w	r3, r0, r3
 8001144:	440b      	add	r3, r1
 8001146:	335c      	adds	r3, #92	; 0x5c
 8001148:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	212c      	movs	r1, #44	; 0x2c
 8001150:	fb01 f303 	mul.w	r3, r1, r3
 8001154:	4413      	add	r3, r2
 8001156:	335c      	adds	r3, #92	; 0x5c
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b02      	cmp	r3, #2
 800115c:	d912      	bls.n	8001184 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	212c      	movs	r1, #44	; 0x2c
 8001164:	fb01 f303 	mul.w	r3, r1, r3
 8001168:	4413      	add	r3, r2
 800116a:	335c      	adds	r3, #92	; 0x5c
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	212c      	movs	r1, #44	; 0x2c
 8001176:	fb01 f303 	mul.w	r3, r1, r3
 800117a:	4413      	add	r3, r2
 800117c:	3360      	adds	r3, #96	; 0x60
 800117e:	2204      	movs	r2, #4
 8001180:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001182:	e073      	b.n	800126c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	212c      	movs	r1, #44	; 0x2c
 800118a:	fb01 f303 	mul.w	r3, r1, r3
 800118e:	4413      	add	r3, r2
 8001190:	3360      	adds	r3, #96	; 0x60
 8001192:	2202      	movs	r2, #2
 8001194:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	015a      	lsls	r2, r3, #5
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4413      	add	r3, r2
 800119e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80011ac:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	015a      	lsls	r2, r3, #5
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4413      	add	r3, r2
 80011be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011c2:	461a      	mov	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80011c8:	e050      	b.n	800126c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	212c      	movs	r1, #44	; 0x2c
 80011d0:	fb01 f303 	mul.w	r3, r1, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	3361      	adds	r3, #97	; 0x61
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d122      	bne.n	8001224 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	212c      	movs	r1, #44	; 0x2c
 80011e4:	fb01 f303 	mul.w	r3, r1, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	3360      	adds	r3, #96	; 0x60
 80011ec:	2202      	movs	r2, #2
 80011ee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	015a      	lsls	r2, r3, #5
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4413      	add	r3, r2
 80011f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001206:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800120e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	015a      	lsls	r2, r3, #5
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4413      	add	r3, r2
 8001218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800121c:	461a      	mov	r2, r3
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e023      	b.n	800126c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	212c      	movs	r1, #44	; 0x2c
 800122a:	fb01 f303 	mul.w	r3, r1, r3
 800122e:	4413      	add	r3, r2
 8001230:	3361      	adds	r3, #97	; 0x61
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b07      	cmp	r3, #7
 8001236:	d119      	bne.n	800126c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	212c      	movs	r1, #44	; 0x2c
 800123e:	fb01 f303 	mul.w	r3, r1, r3
 8001242:	4413      	add	r3, r2
 8001244:	335c      	adds	r3, #92	; 0x5c
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	202c      	movs	r0, #44	; 0x2c
 8001250:	fb00 f303 	mul.w	r3, r0, r3
 8001254:	440b      	add	r3, r1
 8001256:	335c      	adds	r3, #92	; 0x5c
 8001258:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	212c      	movs	r1, #44	; 0x2c
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	4413      	add	r3, r2
 8001266:	3360      	adds	r3, #96	; 0x60
 8001268:	2204      	movs	r2, #4
 800126a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	015a      	lsls	r2, r3, #5
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4413      	add	r3, r2
 8001274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001278:	461a      	mov	r2, r3
 800127a:	2302      	movs	r3, #2
 800127c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	b2d9      	uxtb	r1, r3
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	202c      	movs	r0, #44	; 0x2c
 8001288:	fb00 f303 	mul.w	r3, r0, r3
 800128c:	4413      	add	r3, r2
 800128e:	3360      	adds	r3, #96	; 0x60
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f001 f8b6 	bl	8002406 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800129a:	e061      	b.n	8001360 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	015a      	lsls	r2, r3, #5
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4413      	add	r3, r2
 80012a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	2b10      	cmp	r3, #16
 80012b0:	d156      	bne.n	8001360 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	212c      	movs	r1, #44	; 0x2c
 80012b8:	fb01 f303 	mul.w	r3, r1, r3
 80012bc:	4413      	add	r3, r2
 80012be:	333f      	adds	r3, #63	; 0x3f
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d111      	bne.n	80012ea <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	212c      	movs	r1, #44	; 0x2c
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	335c      	adds	r3, #92	; 0x5c
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fe38 	bl	8001f58 <USB_HC_Halt>
 80012e8:	e031      	b.n	800134e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	212c      	movs	r1, #44	; 0x2c
 80012f0:	fb01 f303 	mul.w	r3, r1, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	333f      	adds	r3, #63	; 0x3f
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d009      	beq.n	8001312 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	212c      	movs	r1, #44	; 0x2c
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	4413      	add	r3, r2
 800130a:	333f      	adds	r3, #63	; 0x3f
 800130c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800130e:	2b02      	cmp	r3, #2
 8001310:	d11d      	bne.n	800134e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	212c      	movs	r1, #44	; 0x2c
 8001318:	fb01 f303 	mul.w	r3, r1, r3
 800131c:	4413      	add	r3, r2
 800131e:	335c      	adds	r3, #92	; 0x5c
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d110      	bne.n	800134e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	212c      	movs	r1, #44	; 0x2c
 8001332:	fb01 f303 	mul.w	r3, r1, r3
 8001336:	4413      	add	r3, r2
 8001338:	3361      	adds	r3, #97	; 0x61
 800133a:	2203      	movs	r2, #3
 800133c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fe05 	bl	8001f58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	015a      	lsls	r2, r3, #5
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4413      	add	r3, r2
 8001356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800135a:	461a      	mov	r2, r3
 800135c:	2310      	movs	r3, #16
 800135e:	6093      	str	r3, [r2, #8]
}
 8001360:	bf00      	nop
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	015a      	lsls	r2, r3, #5
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4413      	add	r3, r2
 800138a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b04      	cmp	r3, #4
 8001396:	d11a      	bne.n	80013ce <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	4413      	add	r3, r2
 80013a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013a4:	461a      	mov	r2, r3
 80013a6:	2304      	movs	r3, #4
 80013a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	212c      	movs	r1, #44	; 0x2c
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	3361      	adds	r3, #97	; 0x61
 80013b8:	2206      	movs	r2, #6
 80013ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fdc6 	bl	8001f58 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80013cc:	e331      	b.n	8001a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	015a      	lsls	r2, r3, #5
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4413      	add	r3, r2
 80013d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 0320 	and.w	r3, r3, #32
 80013e0:	2b20      	cmp	r3, #32
 80013e2:	d12e      	bne.n	8001442 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	015a      	lsls	r2, r3, #5
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	4413      	add	r3, r2
 80013ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013f0:	461a      	mov	r2, r3
 80013f2:	2320      	movs	r3, #32
 80013f4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	212c      	movs	r1, #44	; 0x2c
 80013fc:	fb01 f303 	mul.w	r3, r1, r3
 8001400:	4413      	add	r3, r2
 8001402:	333d      	adds	r3, #61	; 0x3d
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	f040 8313 	bne.w	8001a32 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	212c      	movs	r1, #44	; 0x2c
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	4413      	add	r3, r2
 8001418:	333d      	adds	r3, #61	; 0x3d
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	212c      	movs	r1, #44	; 0x2c
 8001424:	fb01 f303 	mul.w	r3, r1, r3
 8001428:	4413      	add	r3, r2
 800142a:	3360      	adds	r3, #96	; 0x60
 800142c:	2202      	movs	r2, #2
 800142e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fd8c 	bl	8001f58 <USB_HC_Halt>
}
 8001440:	e2f7      	b.n	8001a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	015a      	lsls	r2, r3, #5
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4413      	add	r3, r2
 800144a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001458:	d112      	bne.n	8001480 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	015a      	lsls	r2, r3, #5
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4413      	add	r3, r2
 8001462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001466:	461a      	mov	r2, r3
 8001468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800146c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fd6d 	bl	8001f58 <USB_HC_Halt>
}
 800147e:	e2d8      	b.n	8001a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	015a      	lsls	r2, r3, #5
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	4413      	add	r3, r2
 8001488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b01      	cmp	r3, #1
 8001494:	d140      	bne.n	8001518 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	212c      	movs	r1, #44	; 0x2c
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	335c      	adds	r3, #92	; 0x5c
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	015a      	lsls	r2, r3, #5
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ba:	2b40      	cmp	r3, #64	; 0x40
 80014bc:	d111      	bne.n	80014e2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	212c      	movs	r1, #44	; 0x2c
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	333d      	adds	r3, #61	; 0x3d
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	015a      	lsls	r2, r3, #5
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014dc:	461a      	mov	r2, r3
 80014de:	2340      	movs	r3, #64	; 0x40
 80014e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ee:	461a      	mov	r2, r3
 80014f0:	2301      	movs	r3, #1
 80014f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	212c      	movs	r1, #44	; 0x2c
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	4413      	add	r3, r2
 8001500:	3361      	adds	r3, #97	; 0x61
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fd21 	bl	8001f58 <USB_HC_Halt>
}
 8001516:	e28c      	b.n	8001a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	015a      	lsls	r2, r3, #5
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	4413      	add	r3, r2
 8001520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152a:	2b40      	cmp	r3, #64	; 0x40
 800152c:	d12c      	bne.n	8001588 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3361      	adds	r3, #97	; 0x61
 800153c:	2204      	movs	r2, #4
 800153e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	212c      	movs	r1, #44	; 0x2c
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	333d      	adds	r3, #61	; 0x3d
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	212c      	movs	r1, #44	; 0x2c
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	335c      	adds	r3, #92	; 0x5c
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fcf2 	bl	8001f58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	4413      	add	r3, r2
 800157c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001580:	461a      	mov	r2, r3
 8001582:	2340      	movs	r3, #64	; 0x40
 8001584:	6093      	str	r3, [r2, #8]
}
 8001586:	e254      	b.n	8001a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4413      	add	r3, r2
 8001590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11a      	bne.n	80015d4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015aa:	461a      	mov	r2, r3
 80015ac:	2308      	movs	r3, #8
 80015ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	212c      	movs	r1, #44	; 0x2c
 80015b6:	fb01 f303 	mul.w	r3, r1, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	3361      	adds	r3, #97	; 0x61
 80015be:	2205      	movs	r2, #5
 80015c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fcc3 	bl	8001f58 <USB_HC_Halt>
}
 80015d2:	e22e      	b.n	8001a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	015a      	lsls	r2, r3, #5
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	4413      	add	r3, r2
 80015dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d140      	bne.n	800166c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	212c      	movs	r1, #44	; 0x2c
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	335c      	adds	r3, #92	; 0x5c
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	212c      	movs	r1, #44	; 0x2c
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	3361      	adds	r3, #97	; 0x61
 800160a:	2203      	movs	r2, #3
 800160c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	212c      	movs	r1, #44	; 0x2c
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	4413      	add	r3, r2
 800161a:	333d      	adds	r3, #61	; 0x3d
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d112      	bne.n	8001648 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	212c      	movs	r1, #44	; 0x2c
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	4413      	add	r3, r2
 800162e:	333c      	adds	r3, #60	; 0x3c
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d108      	bne.n	8001648 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	212c      	movs	r1, #44	; 0x2c
 800163c:	fb01 f303 	mul.w	r3, r1, r3
 8001640:	4413      	add	r3, r2
 8001642:	333d      	adds	r3, #61	; 0x3d
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fc80 	bl	8001f58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	4413      	add	r3, r2
 8001660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001664:	461a      	mov	r2, r3
 8001666:	2310      	movs	r3, #16
 8001668:	6093      	str	r3, [r2, #8]
}
 800166a:	e1e2      	b.n	8001a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	4413      	add	r3, r2
 8001674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	2b80      	cmp	r3, #128	; 0x80
 8001680:	d164      	bne.n	800174c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d111      	bne.n	80016ae <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	212c      	movs	r1, #44	; 0x2c
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	3361      	adds	r3, #97	; 0x61
 8001698:	2206      	movs	r2, #6
 800169a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fc56 	bl	8001f58 <USB_HC_Halt>
 80016ac:	e044      	b.n	8001738 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	212c      	movs	r1, #44	; 0x2c
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	335c      	adds	r3, #92	; 0x5c
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	202c      	movs	r0, #44	; 0x2c
 80016c6:	fb00 f303 	mul.w	r3, r0, r3
 80016ca:	440b      	add	r3, r1
 80016cc:	335c      	adds	r3, #92	; 0x5c
 80016ce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	212c      	movs	r1, #44	; 0x2c
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4413      	add	r3, r2
 80016dc:	335c      	adds	r3, #92	; 0x5c
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d920      	bls.n	8001726 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	212c      	movs	r1, #44	; 0x2c
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	335c      	adds	r3, #92	; 0x5c
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	212c      	movs	r1, #44	; 0x2c
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	3360      	adds	r3, #96	; 0x60
 8001704:	2204      	movs	r2, #4
 8001706:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	b2d9      	uxtb	r1, r3
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	202c      	movs	r0, #44	; 0x2c
 8001712:	fb00 f303 	mul.w	r3, r0, r3
 8001716:	4413      	add	r3, r2
 8001718:	3360      	adds	r3, #96	; 0x60
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fe71 	bl	8002406 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001724:	e008      	b.n	8001738 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	212c      	movs	r1, #44	; 0x2c
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	3360      	adds	r3, #96	; 0x60
 8001734:	2202      	movs	r2, #2
 8001736:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	4413      	add	r3, r2
 8001740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001744:	461a      	mov	r2, r3
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	6093      	str	r3, [r2, #8]
}
 800174a:	e172      	b.n	8001a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	015a      	lsls	r2, r3, #5
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	4413      	add	r3, r2
 8001754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001762:	d11b      	bne.n	800179c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	212c      	movs	r1, #44	; 0x2c
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	3361      	adds	r3, #97	; 0x61
 8001772:	2208      	movs	r2, #8
 8001774:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f000 fbe9 	bl	8001f58 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4413      	add	r3, r2
 800178e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001792:	461a      	mov	r2, r3
 8001794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001798:	6093      	str	r3, [r2, #8]
}
 800179a:	e14a      	b.n	8001a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	015a      	lsls	r2, r3, #5
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	f040 813f 	bne.w	8001a32 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	212c      	movs	r1, #44	; 0x2c
 80017ba:	fb01 f303 	mul.w	r3, r1, r3
 80017be:	4413      	add	r3, r2
 80017c0:	3361      	adds	r3, #97	; 0x61
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d17d      	bne.n	80018c4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3360      	adds	r3, #96	; 0x60
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	333f      	adds	r3, #63	; 0x3f
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d00a      	beq.n	8001804 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	333f      	adds	r3, #63	; 0x3f
 80017fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	f040 8100 	bne.w	8001a04 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d113      	bne.n	8001834 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	3355      	adds	r3, #85	; 0x55
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f083 0301 	eor.w	r3, r3, #1
 8001820:	b2d8      	uxtb	r0, r3
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3355      	adds	r3, #85	; 0x55
 8001830:	4602      	mov	r2, r0
 8001832:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b01      	cmp	r3, #1
 800183a:	f040 80e3 	bne.w	8001a04 <HCD_HC_OUT_IRQHandler+0x69c>
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	212c      	movs	r1, #44	; 0x2c
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	4413      	add	r3, r2
 800184a:	334c      	adds	r3, #76	; 0x4c
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80d8 	beq.w	8001a04 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	212c      	movs	r1, #44	; 0x2c
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4413      	add	r3, r2
 8001860:	334c      	adds	r3, #76	; 0x4c
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	202c      	movs	r0, #44	; 0x2c
 800186a:	fb00 f202 	mul.w	r2, r0, r2
 800186e:	440a      	add	r2, r1
 8001870:	3240      	adds	r2, #64	; 0x40
 8001872:	8812      	ldrh	r2, [r2, #0]
 8001874:	4413      	add	r3, r2
 8001876:	3b01      	subs	r3, #1
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	202c      	movs	r0, #44	; 0x2c
 800187e:	fb00 f202 	mul.w	r2, r0, r2
 8001882:	440a      	add	r2, r1
 8001884:	3240      	adds	r2, #64	; 0x40
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	fbb3 f3f2 	udiv	r3, r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80b5 	beq.w	8001a04 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3355      	adds	r3, #85	; 0x55
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f083 0301 	eor.w	r3, r3, #1
 80018ae:	b2d8      	uxtb	r0, r3
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	3355      	adds	r3, #85	; 0x55
 80018be:	4602      	mov	r2, r0
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	e09f      	b.n	8001a04 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	3361      	adds	r3, #97	; 0x61
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d109      	bne.n	80018ec <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3360      	adds	r3, #96	; 0x60
 80018e6:	2202      	movs	r2, #2
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e08b      	b.n	8001a04 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	3361      	adds	r3, #97	; 0x61
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d109      	bne.n	8001914 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3360      	adds	r3, #96	; 0x60
 800190e:	2202      	movs	r2, #2
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	e077      	b.n	8001a04 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	3361      	adds	r3, #97	; 0x61
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b05      	cmp	r3, #5
 8001926:	d109      	bne.n	800193c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3360      	adds	r3, #96	; 0x60
 8001936:	2205      	movs	r2, #5
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e063      	b.n	8001a04 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3361      	adds	r3, #97	; 0x61
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b06      	cmp	r3, #6
 800194e:	d009      	beq.n	8001964 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3361      	adds	r3, #97	; 0x61
 800195e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001960:	2b08      	cmp	r3, #8
 8001962:	d14f      	bne.n	8001a04 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	335c      	adds	r3, #92	; 0x5c
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	202c      	movs	r0, #44	; 0x2c
 800197c:	fb00 f303 	mul.w	r3, r0, r3
 8001980:	440b      	add	r3, r1
 8001982:	335c      	adds	r3, #92	; 0x5c
 8001984:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	212c      	movs	r1, #44	; 0x2c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	335c      	adds	r3, #92	; 0x5c
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d912      	bls.n	80019c0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	212c      	movs	r1, #44	; 0x2c
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	335c      	adds	r3, #92	; 0x5c
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	212c      	movs	r1, #44	; 0x2c
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	3360      	adds	r3, #96	; 0x60
 80019ba:	2204      	movs	r2, #4
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	e021      	b.n	8001a04 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	212c      	movs	r1, #44	; 0x2c
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	3360      	adds	r3, #96	; 0x60
 80019ce:	2202      	movs	r2, #2
 80019d0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	015a      	lsls	r2, r3, #5
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019e8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019f0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fe:	461a      	mov	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a10:	461a      	mov	r2, r3
 8001a12:	2302      	movs	r3, #2
 8001a14:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	b2d9      	uxtb	r1, r3
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	202c      	movs	r0, #44	; 0x2c
 8001a20:	fb00 f303 	mul.w	r3, r0, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3360      	adds	r3, #96	; 0x60
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fcea 	bl	8002406 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a32:	bf00      	nop
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b08a      	sub	sp, #40	; 0x28
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	0c5b      	lsrs	r3, r3, #17
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a6e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d004      	beq.n	8001a80 <HCD_RXQLVL_IRQHandler+0x46>
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	f000 80a9 	beq.w	8001bd0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001a7e:	e0aa      	b.n	8001bd6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80a6 	beq.w	8001bd4 <HCD_RXQLVL_IRQHandler+0x19a>
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	212c      	movs	r1, #44	; 0x2c
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	3344      	adds	r3, #68	; 0x44
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 809b 	beq.w	8001bd4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	212c      	movs	r1, #44	; 0x2c
 8001aa4:	fb01 f303 	mul.w	r3, r1, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3350      	adds	r3, #80	; 0x50
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	441a      	add	r2, r3
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	202c      	movs	r0, #44	; 0x2c
 8001ab8:	fb00 f303 	mul.w	r3, r0, r3
 8001abc:	440b      	add	r3, r1
 8001abe:	334c      	adds	r3, #76	; 0x4c
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d87a      	bhi.n	8001bbc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	212c      	movs	r1, #44	; 0x2c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3344      	adds	r3, #68	; 0x44
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	b292      	uxth	r2, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f000 f976 	bl	8001dd0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	212c      	movs	r1, #44	; 0x2c
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	3344      	adds	r3, #68	; 0x44
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	441a      	add	r2, r3
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	202c      	movs	r0, #44	; 0x2c
 8001afe:	fb00 f303 	mul.w	r3, r0, r3
 8001b02:	440b      	add	r3, r1
 8001b04:	3344      	adds	r3, #68	; 0x44
 8001b06:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	212c      	movs	r1, #44	; 0x2c
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	3350      	adds	r3, #80	; 0x50
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	441a      	add	r2, r3
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	202c      	movs	r0, #44	; 0x2c
 8001b22:	fb00 f303 	mul.w	r3, r0, r3
 8001b26:	440b      	add	r3, r1
 8001b28:	3350      	adds	r3, #80	; 0x50
 8001b2a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	0cdb      	lsrs	r3, r3, #19
 8001b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b40:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3340      	adds	r3, #64	; 0x40
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d13c      	bne.n	8001bd4 <HCD_RXQLVL_IRQHandler+0x19a>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d039      	beq.n	8001bd4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b76:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b7e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	212c      	movs	r1, #44	; 0x2c
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3354      	adds	r3, #84	; 0x54
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	f083 0301 	eor.w	r3, r3, #1
 8001ba6:	b2d8      	uxtb	r0, r3
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3354      	adds	r3, #84	; 0x54
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	701a      	strb	r2, [r3, #0]
      break;
 8001bba:	e00b      	b.n	8001bd4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	212c      	movs	r1, #44	; 0x2c
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3360      	adds	r3, #96	; 0x60
 8001bca:	2204      	movs	r2, #4
 8001bcc:	701a      	strb	r2, [r3, #0]
      break;
 8001bce:	e001      	b.n	8001bd4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001bd0:	bf00      	nop
 8001bd2:	e000      	b.n	8001bd6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001bd4:	bf00      	nop
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001c0a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d10b      	bne.n	8001c2e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d102      	bne.n	8001c26 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fbd4 	bl	80023ce <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d132      	bne.n	8001c9e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d126      	bne.n	8001c98 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d113      	bne.n	8001c7a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001c58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c5c:	d106      	bne.n	8001c6c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2102      	movs	r1, #2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f92c 	bl	8001ec2 <USB_InitFSLSPClkSel>
 8001c6a:	e011      	b.n	8001c90 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f925 	bl	8001ec2 <USB_InitFSLSPClkSel>
 8001c78:	e00a      	b.n	8001c90 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d106      	bne.n	8001c90 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001c8e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fbc6 	bl	8002422 <HAL_HCD_PortEnabled_Callback>
 8001c96:	e002      	b.n	8001c9e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 fbd0 	bl	800243e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d103      	bne.n	8001cb0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f043 0320 	orr.w	r3, r3, #32
 8001cae:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f023 0201 	bic.w	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <USB_FlushTxFifo+0x64>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e01b      	b.n	8001d60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	daf2      	bge.n	8001d16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	019b      	lsls	r3, r3, #6
 8001d38:	f043 0220 	orr.w	r2, r3, #32
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3301      	adds	r3, #1
 8001d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <USB_FlushTxFifo+0x64>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e006      	b.n	8001d60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d0f0      	beq.n	8001d40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	00030d40 	.word	0x00030d40

08001d70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <USB_FlushRxFifo+0x5c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e018      	b.n	8001dc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	daf2      	bge.n	8001d7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3301      	adds	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <USB_FlushRxFifo+0x5c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e006      	b.n	8001dc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d0f0      	beq.n	8001da0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	00030d40 	.word	0x00030d40

08001dd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b08b      	sub	sp, #44	; 0x2c
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
 8001dfa:	e014      	b.n	8001e26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	601a      	str	r2, [r3, #0]
    pDest++;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	3301      	adds	r3, #1
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	3301      	adds	r3, #1
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	3301      	adds	r3, #1
 8001e24:	623b      	str	r3, [r7, #32]
 8001e26:	6a3a      	ldr	r2, [r7, #32]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d3e6      	bcc.n	8001dfc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8001e2e:	8bfb      	ldrh	r3, [r7, #30]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01e      	beq.n	8001e72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	701a      	strb	r2, [r3, #0]
      i++;
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	3301      	adds	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8001e66:	8bfb      	ldrh	r3, [r7, #30]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8001e6c:	8bfb      	ldrh	r3, [r7, #30]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ea      	bne.n	8001e48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	372c      	adds	r7, #44	; 0x2c
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8001e98:	68fb      	ldr	r3, [r7, #12]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ee0:	f023 0303 	bic.w	r3, r3, #3
 8001ee4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	68f9      	ldr	r1, [r7, #12]
 8001ef6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001f10:	6053      	str	r3, [r2, #4]
 8001f12:	e009      	b.n	8001f28 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d106      	bne.n	8001f28 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f20:	461a      	mov	r2, r3
 8001f22:	f241 7370 	movw	r3, #6000	; 0x1770
 8001f26:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	b29b      	uxth	r3, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	0c9b      	lsrs	r3, r3, #18
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0fdb      	lsrs	r3, r3, #31
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d104      	bne.n	8001fb2 <USB_HC_Halt+0x5a>
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e0c8      	b.n	8002144 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <USB_HC_Halt+0x66>
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d163      	bne.n	8002086 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	0151      	lsls	r1, r2, #5
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	440a      	add	r2, r1
 8001fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fdc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 80ab 	bne.w	8002142 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d133      	bne.n	8002060 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	0151      	lsls	r1, r2, #5
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	440a      	add	r2, r1
 800200e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002012:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002016:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	0151      	lsls	r1, r2, #5
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	440a      	add	r2, r1
 800202e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002032:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002036:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002044:	d81d      	bhi.n	8002082 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800205c:	d0ec      	beq.n	8002038 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800205e:	e070      	b.n	8002142 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	0151      	lsls	r1, r2, #5
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	440a      	add	r2, r1
 8002076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800207a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800207e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002080:	e05f      	b.n	8002142 <USB_HC_Halt+0x1ea>
            break;
 8002082:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002084:	e05d      	b.n	8002142 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	0151      	lsls	r1, r2, #5
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	440a      	add	r2, r1
 800209c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d133      	bne.n	800211e <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	0151      	lsls	r1, r2, #5
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	440a      	add	r2, r1
 80020cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	0151      	lsls	r1, r2, #5
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	440a      	add	r2, r1
 80020ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020f4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3301      	adds	r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002102:	d81d      	bhi.n	8002140 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800211a:	d0ec      	beq.n	80020f6 <USB_HC_Halt+0x19e>
 800211c:	e011      	b.n	8002142 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	0151      	lsls	r1, r2, #5
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	440a      	add	r2, r1
 8002134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e000      	b.n	8002142 <USB_HC_Halt+0x1ea>
          break;
 8002140:	bf00      	nop
    }
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3724      	adds	r7, #36	; 0x24
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fdbe 	bl	8001ce6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800216a:	2110      	movs	r1, #16
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fdcb 	bl	8001d08 <USB_FlushTxFifo>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff fdf7 	bl	8001d70 <USB_FlushRxFifo>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	e01f      	b.n	80021d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	461a      	mov	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	3301      	adds	r3, #1
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d9dc      	bls.n	8002192 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	e034      	b.n	8002248 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002204:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	461a      	mov	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3301      	adds	r3, #1
 800221c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002224:	d80c      	bhi.n	8002240 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800223c:	d0ec      	beq.n	8002218 <USB_StopHost+0xc8>
 800223e:	e000      	b.n	8002242 <USB_StopHost+0xf2>
        break;
 8002240:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	3301      	adds	r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b0f      	cmp	r3, #15
 800224c:	d9c7      	bls.n	80021de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002254:	461a      	mov	r2, r3
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f04f 32ff 	mov.w	r2, #4294967295
 8002262:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff fd2d 	bl	8001cc4 <USB_EnableGlobalInt>

  return ret;
 800226a:	7ffb      	ldrb	r3, [r7, #31]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f804 	bl	8002298 <USBH_HandleSof>
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b0b      	cmp	r3, #11
 80022a8:	d10a      	bne.n	80022c0 <USBH_HandleSof+0x28>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
  }
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80022d8:	bf00      	nop
}
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80022f4:	bf00      	nop
}
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f883 	bl	800245a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	791b      	ldrb	r3, [r3, #4]
 8002358:	4619      	mov	r1, r3
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f80b 	bl	8002376 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	795b      	ldrb	r3, [r3, #5]
 8002364:	4619      	mov	r1, r3
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f805 	bl	8002376 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	2b0f      	cmp	r3, #15
 8002386:	d80d      	bhi.n	80023a4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	33e0      	adds	r3, #224	; 0xe0
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	33e0      	adds	r3, #224	; 0xe0
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff57 	bl	8002274 <USBH_LL_IncTimer>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff8f 	bl	8002300 <USBH_LL_Connect>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff98 	bl	800232e <USBH_LL_Disconnect>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	70fb      	strb	r3, [r7, #3]
 8002412:	4613      	mov	r3, r2
 8002414:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff49 	bl	80022c8 <USBH_LL_PortEnabled>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff49 	bl	80022e4 <USBH_LL_PortDisabled>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fc07 	bl	8000c84 <HAL_HCD_Stop>
 8002476:	4603      	mov	r3, r0
 8002478:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	4618      	mov	r0, r3
 800247e:	f000 f807 	bl	8002490 <USBH_Get_USB_Status>
 8002482:	4603      	mov	r3, r0
 8002484:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002486:	7bbb      	ldrb	r3, [r7, #14]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d817      	bhi.n	80024d4 <USBH_Get_USB_Status+0x44>
 80024a4:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <USBH_Get_USB_Status+0x1c>)
 80024a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024aa:	bf00      	nop
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	080024c3 	.word	0x080024c3
 80024b4:	080024c9 	.word	0x080024c9
 80024b8:	080024cf 	.word	0x080024cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
    break;
 80024c0:	e00b      	b.n	80024da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80024c2:	2302      	movs	r3, #2
 80024c4:	73fb      	strb	r3, [r7, #15]
    break;
 80024c6:	e008      	b.n	80024da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
    break;
 80024cc:	e005      	b.n	80024da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80024ce:	2302      	movs	r3, #2
 80024d0:	73fb      	strb	r3, [r7, #15]
    break;
 80024d2:	e002      	b.n	80024da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80024d4:	2302      	movs	r3, #2
 80024d6:	73fb      	strb	r3, [r7, #15]
    break;
 80024d8:	bf00      	nop
  }
  return usb_status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <__libc_init_array>:
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	4d0d      	ldr	r5, [pc, #52]	; (8002520 <__libc_init_array+0x38>)
 80024ec:	4c0d      	ldr	r4, [pc, #52]	; (8002524 <__libc_init_array+0x3c>)
 80024ee:	1b64      	subs	r4, r4, r5
 80024f0:	10a4      	asrs	r4, r4, #2
 80024f2:	2600      	movs	r6, #0
 80024f4:	42a6      	cmp	r6, r4
 80024f6:	d109      	bne.n	800250c <__libc_init_array+0x24>
 80024f8:	4d0b      	ldr	r5, [pc, #44]	; (8002528 <__libc_init_array+0x40>)
 80024fa:	4c0c      	ldr	r4, [pc, #48]	; (800252c <__libc_init_array+0x44>)
 80024fc:	f000 f818 	bl	8002530 <_init>
 8002500:	1b64      	subs	r4, r4, r5
 8002502:	10a4      	asrs	r4, r4, #2
 8002504:	2600      	movs	r6, #0
 8002506:	42a6      	cmp	r6, r4
 8002508:	d105      	bne.n	8002516 <__libc_init_array+0x2e>
 800250a:	bd70      	pop	{r4, r5, r6, pc}
 800250c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002510:	4798      	blx	r3
 8002512:	3601      	adds	r6, #1
 8002514:	e7ee      	b.n	80024f4 <__libc_init_array+0xc>
 8002516:	f855 3b04 	ldr.w	r3, [r5], #4
 800251a:	4798      	blx	r3
 800251c:	3601      	adds	r6, #1
 800251e:	e7f2      	b.n	8002506 <__libc_init_array+0x1e>
 8002520:	08002548 	.word	0x08002548
 8002524:	08002548 	.word	0x08002548
 8002528:	08002548 	.word	0x08002548
 800252c:	0800254c 	.word	0x0800254c

08002530 <_init>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	bf00      	nop
 8002534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002536:	bc08      	pop	{r3}
 8002538:	469e      	mov	lr, r3
 800253a:	4770      	bx	lr

0800253c <_fini>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	bf00      	nop
 8002540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002542:	bc08      	pop	{r3}
 8002544:	469e      	mov	lr, r3
 8002546:	4770      	bx	lr
